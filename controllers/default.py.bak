# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################

def index():
    return dict()
    
@auth.requires_login()    
def inbox():
    ##messages=db().select(db.message.ALL)
    #messages=db().select(db.users.fullname, db.addresses.email_address, left=db.addresses.on(db.addresses.user_id==db.users.id))
    messages=db(db.message.toid == auth.user.id).select(db.message.ALL)
    return dict(messages=messages) 
    
@auth.requires_login()    
def outbox():
    messages=db(db.message.fromid == auth.user.id).select(db.message.ALL)
    return dict(messages=messages) 
    
@auth.requires_login()        
def create():
    form=SQLFORM(db.message)
    if form.accepts(request.vars, session):
        session.flash='Record inserted'
        redirect(URL(r=request,f='inbox'))
    elif form.errors:
        response.flash='There error'
    return dict(form=form)
    
#def create():
#    return dict(form=crud.create(db.message))

#def truncate():
    #return db.message.truncate()
        
@auth.requires_login()    
def read():
    return dict(form=crud.read(db.message, request.args(0)))
    
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())


def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request,db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id[
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs bust be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
